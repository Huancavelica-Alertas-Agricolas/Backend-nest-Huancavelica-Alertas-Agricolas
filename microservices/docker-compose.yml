version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15
    container_name: agro_postgres_microservices
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: agro_alertas
    ports:
      - "5434:5432"  # Puerto diferente para evitar conflictos
    volumes:
      - postgres_microservices_data:/var/lib/postgresql/data
    networks:
      - agro-microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d agro_alertas"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: ./gateway/api-gateway
      dockerfile: Dockerfile
    container_name: agro_gateway_microservices
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - USER_SERVICE_HOST=user-service
      - USER_SERVICE_PORT=3001
      - WEATHER_SERVICE_HOST=weather-service
      - WEATHER_SERVICE_PORT=3002
      - NOTIFICATION_SERVICE_HOST=notification-service
      - NOTIFICATION_SERVICE_PORT=3003
      - ALERT_SERVICE_HOST=alert-service
      - ALERT_SERVICE_PORT=3004
      - LOG_SERVICE_HOST=log-service
      - LOG_SERVICE_PORT=3005
      - PREFERENCE_SERVICE_HOST=preference-service
      - PREFERENCE_SERVICE_PORT=3006
    depends_on:
      - user-service
      - weather-service
      - notification-service
      - alert-service
      - log-service
      - preference-service
    networks:
      - agro-microservices-network
    restart: unless-stopped

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: agro_user_service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=admin
      - DB_PASSWORD=admin
      - DB_NAME=agro_alertas
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - agro-microservices-network
    restart: unless-stopped

  # Weather Service
  weather-service:
    build:
      context: ./services/weather-service
      dockerfile: Dockerfile
    container_name: agro_weather_service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - API_KEY=${API_KEY}
    volumes:
      - weather_reports:/app/reports
    networks:
      - agro-microservices-network
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: agro_notification_service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_USER=${MAIL_USER}
      - MAIL_PASS=${MAIL_PASS}
      - MAIL_FROM=${MAIL_FROM}
    networks:
      - agro-microservices-network
    restart: unless-stopped

  # Alert Service (Orchestrator)
  alert-service:
    build:
      context: ./services/alert-service
      dockerfile: Dockerfile
    container_name: agro_alert_service
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - PORT=3004
      - WEATHER_SERVICE_HOST=weather-service
      - WEATHER_SERVICE_PORT=3002
      - NOTIFICATION_SERVICE_HOST=notification-service
      - NOTIFICATION_SERVICE_PORT=3003
      - LOG_SERVICE_HOST=log-service
      - LOG_SERVICE_PORT=3005
    depends_on:
      - weather-service
      - notification-service
      - log-service
    networks:
      - agro-microservices-network
    restart: unless-stopped

  # Log Service
  log-service:
    build:
      context: ./services/log-service
      dockerfile: Dockerfile
    container_name: agro_log_service
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=development
      - PORT=3005
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=admin
      - DB_PASSWORD=admin
      - DB_NAME=agro_alertas
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - agro-microservices-network
    restart: unless-stopped

  # Preference Service
  preference-service:
    build:
      context: ./services/preference-service
      dockerfile: Dockerfile
    container_name: agro_preference_service
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=development
      - PORT=3006
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=admin
      - DB_PASSWORD=admin
      - DB_NAME=agro_alertas
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - agro-microservices-network
    restart: unless-stopped

volumes:
  postgres_microservices_data:
  weather_reports:

networks:
  agro-microservices-network:
    driver: bridge